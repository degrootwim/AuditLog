trigger:
  branches:
    include:
      - master

  paths:
    include:
      - AuditLog/
      - AuditLog.ConsoleClient/
      - AuditLog.DAL/
      - AuditLog.DAL.Test/
      - AuditLog.Domain/
      - AuditLog.Test/
      - AuditLog.IntegrationTest/
      - azure-pipelines.yaml


variables:
  buildConfiguration: 'Release'
  projects: |
    AuditLog/AuditLog.csproj
    AuditLog.DAL/AuditLog.DAL.csproj
    AuditLog.Domain/AuditLog.Domain.csproj
    AuditLog.ConsoleClient/AuditLog.ConsoleClient.csproj
  testProjects: |
    AuditLog.Test/AuditLog.Test.csproj
    AuditLog.DAL.Test/AuditLog.DAL.Test.csproj
  integrationTestProjects: |
    AuditLog.IntegrationTest/AuditLog.IntegrationTest.csproj
  projectKey: WimG:AudiLog
  projectName: Wim de Groot AuditLog

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: SonarQubePrepare@4
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
            inputs:
              SonarQube: 'SonarQube Service Connection'
              scannerMode: 'MSBuild'
              projectKey: $(projectKey)
              projectName: $(projectName)

          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              projects: $(projects)
              arguments: '--configuration $(BuildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              projects: $(testProjects)
              arguments: '--configuration $(BuildConfiguration) --collect:"Code Coverage"'

          - task: SonarQubeAnalyze@4
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')

          - task: SonarQubePublish@4
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
            inputs:
              pollingTimeoutSec: '300'

          - task: sonar-buildbreaker@8
            condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
            inputs:
              SonarQube: 'SonarQube Service Connection'

  - stage: Integration
    displayName: Integration Tests
    dependsOn: Build
    jobs:
      - job: Integration
        displayName: Integration Tests
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - bash: |
              docker run -d -p 5672:5672 --name rabbitmq rabbitmq:3-alpine
            displayName: 'docker run rabbitmq'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: test
              projects: $(integrationTestProjects)
              arguments: '--configuration $(BuildConfiguration)'

  - stage: Release
    displayName: Release
    jobs: 
      - job: Release_ConsoleClient
        displayName: Release_ConsoleClient
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'dotnet publish'
            inputs:
              command: publish
              publishWebProjects: false
              projects: AuditLog.ConsoleClient/AuditLog.ConsoleClient.csproj
              arguments: '--configuration Release --self-contained -f "netcoreapp3.0" -r "linux-x64" --output "AuditLog.ConsoleClient/obj/docker/publish"'
              patchVersion: $(Build.BuildId)
              zipAfterPublish: false
              modifyOutputPath: false

          - task: Docker@2
            displayName: 'docker build and publish'
            inputs:
              containerRegistry: 'wimdegroot'
              repository: 'wimdegroot/audit-log'
              tags: $(Build.BuildId)
              buildContext: 'AuditLog.ConsoleClient/'
              Dockerfile: 'AuditLog.ConsoleClient/Dockerfile'

          